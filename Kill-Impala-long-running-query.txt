#!/usr/bin/python

## *******************************************************************************************
##  killLongRunningQ.py
##
##  Kills Long Running Impala Queries
##
##  Usage: ./killLongRunningQ.py  timeInSeconds [KILL]
##
##    Set timeInSeconds to the threshold considered "too long"
##    for an Impala query to run, so that queries that have been running
##    longer than that will be identifed as queries to be killed
##
##    The second argument "KILL" is optional
##    Without this argument, no queries will actually be killed, instead a list
##    of queries that are identified as running too long will just be printed to the console
##    If the argument "KILL" is provided a cancel command will be issues for each selcted query
##
##    CM versions <= 5.4 require Full Administrator role to cancel Impala queries
##
##    This script assumes that there is only a single Impala service running on the cluster

#HOST = "localhost"
#EMAILS = ["EMAIL-ID","EMAIL-ID"]
#FROM = "user@host"
#cm_host
#cluster_name = "cluster-name"
##
## *******************************************************************************************


## ************** imports **************
import sys
from datetime import datetime, timedelta
from cm_api.api_client import ApiResource
import string
import os
import sys
import pprint
import argparse
from datetime import datetime, timedelta
from cm_api.api_client import ApiResource
import smtplib
import shutil
import subprocess

## ************** Settings **************
path="Location of the script"

## ************** Mail Functions **************
def sendmail(message):
  HOST = "localhost"
  SUBJECT = "Report: Cancelled Impala queries"
  EMAILS = ["EMAIL-ID","EMAIL-ID"]
  FROM = "user@host"
  BODY = string.join((
                "From: %s" % FROM,
                "To: %s" % ', '.join(EMAILS),
                "Subject: %s" % SUBJECT ,
                "",
                message
                ), "\r\n")
  server = smtplib.SMTP(HOST)
  server.sendmail(FROM, EMAILS, BODY)
  server.quit()


## ************** File Write **************
def filewrite(filename,stringtowrite):
  print filename
  print stringtowrite
  f=open(path+"queryfiles/"+filename,"a")
  f.write(stringtowrite+"\n")
  f.close();

## ************** Removing Old Files **************
folder = path+'queryfiles'
for the_file in os.listdir(folder):
    file_path = os.path.join(folder, the_file)
    try:
        if os.path.isfile(file_path):
            os.unlink(file_path)
        #elif os.path.isdir(file_path): shutil.rmtree(file_path)
    except Exception as e:
        print(e)

## ************** Cloudera Manager Details **************
cm_host = "cmhost"
cm_port = "7180"
cm_login = "longrunning"
cm_password = "longrunning"

# Cluster Name
cluster_name = "cluster-name"

## ************** Output Message Format **************

fmt = '%Y-%m-%d %H:%M:%S %Z'

def printUsageMessage():
  print "Usage: killLongRunningImpalaQueries.py <queryRunningSeconds>  [KILL]"
  print "Example that lists queries that have run more than 10 minutes:"
  print "./killLongRunningImpalaQueries.py 600"
  print "Example that kills queries that have run more than 10 minutes:"
  print "./killLongRunningImpalaQueries.py 600 KILL"

## ************** Validate command line args **************

if len(sys.argv) == 1 or len(sys.argv) > 3:
  printUsageMessage()
  quit(1)

queryRunningSeconds = sys.argv[1]

if not queryRunningSeconds.isdigit():
  print "Error: the first argument must be a digit (number of seconds)"
  printUsageMessage()
  quit(1)

kill = False

if len(sys.argv) == 3:
  if sys.argv[2] != 'KILL':
    print "the only valid second argument is \"KILL\""
    printUsageMessage()
    quit(1)
  else:
    kill = True

impala_service = None
mail_flag = 1

## ************** Connect to CM **************
print "\nConnecting to Cloudera Manager at " + cm_host + ":" + cm_port
api = ApiResource(server_host=cm_host, server_port=cm_port, username=cm_login, password=cm_password)

## ************** Get the Cluster **************
cluster = api.get_cluster(cluster_name)

## ************** Get the IMPALA service **************
service_list = cluster.get_all_services()
for service in service_list:
  if service.type == "IMPALA":
    impala_service = service
    print "Located Impala Service: " + service.name
    break

if impala_service is None:
  print "Error: Could not locate Impala Service"
  quit(1)

## A window of one day assumes queries have not been running more than 24 hours
now = datetime.utcnow()
start = now - timedelta(days=1)
message="\n"
print "Looking for Impala queries running more than " + str(queryRunningSeconds) + " seconds"

if kill:
  print "Queries will be killed"

filterStr = 'queryDuration > ' + queryRunningSeconds + 's'

## message = message + "Below Impala queries running for more than 2 Hours has been been cancelled\n\n"
impala_query_response = impala_service.get_impala_queries(start_time=start, end_time=now, filter_str=filterStr, limit=1000)
queries = impala_query_response.queries

longRunningQueryCount = 0

## message=message+'There are :'+str(len(queries))+' Long Running Queries\n'
message=message+'Long Running Queries\n'
message=message+'\n__________________________________________________________________________\n\n'
for i in range (0, len(queries)):
  query = queries[i]
  if query.queryState != 'FINISHED' and query.queryState != 'EXCEPTION':
    longRunningQueryCount = longRunningQueryCount + 1
    if longRunningQueryCount == 1:
      print '________________________ There are :'+str(len(queries))+' Long Running Queries ______________________________\n'
    print "queryState : " + query.queryState
    message=message+"\n__________________________________________________________________________\n"
    message=message+"Query State: "+query.queryState+"\n"
    print "queryId: " + query.queryId
    message=message+"Query ID: "+query.queryId+"\n"
    print "user: " + query.user
    message=message+"User: "+query.user+"\n"
    print "startTime: " + query.startTime.strftime(fmt)
    message=message+"Start Time: "+query.startTime.strftime(fmt)+"\n"
    query_duration = now - query.startTime
    message=message+"Total Time Running: "+str(query_duration.seconds + query_duration.days * 86400)+"\n";
    print "query running time (seconds): " + str(query_duration.seconds + query_duration.days * 86400)
    querytimes=str(query_duration.seconds + query_duration.days * 86400)
    print "SQL: " + query.statement
    message=message+"Query Statement: "+query.statement+"\n"
    filewrite("LongRunningInmapalQueries.txt",message);
    print "\n______________________________________________________________________________________\n"
    if kill:
      print "Attempting to kill query..."
      impala_service.cancel_impala_query(query.queryId)
    mail_flag = 1
if longRunningQueryCount == 0:
  print "--------No Long Running queries found--------"

if mail_flag == 1:
  message=message+"\n__________________________________________________________________________\n"
  print "\n_______________________________________\n\nSending report on Mail\n_______________________________________"
  
  ## ************** Sending Mail **************
  #sendmail(message)
  subprocess.call([path+'sendmail.sh'])
